@import url(../../app.component.css);

#pokemon-details{
  margin: 1vw;
  display: grid;
  grid-template-columns: auto auto;
}

.pokemon{
  width: 20vw;
  height: 30vw;
}

.sprite{
  width: 20vw;
  height: auto;
}

.name{

  font-size: x-large;
}

#block-1{
  font-weight: bold;
  display: flex;
  align-items: center;
  flex-direction: column;
}

#details-container{
  height: auto;
  padding: 1vw;
}

#evolution-container{
  grid-column: 1 / span 2;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(100%/2, max(300px, 100%/6)), 1fr));
  margin-top: 3vh;
  padding: 1vw;
  height: auto;
  transition: 250ms;
}

#effectiveness{
  display: flex;
  width: 10vw;
  margin-top: 0.5vw;
}

.typesE{
  color: white;
  font-weight: bolder;
  text-align: center;
  width: 8.8vw;
  padding: 0.8vh;
  margin: 1vh 1vh 0 1vh;
  box-shadow: rgba(0, 0, 0, 0.5) 0.8vh 0.8vh 0.8vh;
  border-radius: 1vw;
  text-shadow: rgb(0, 0, 0) 1px 1px 4px;
}

.list{
  font-weight: bold;
  width: min-content;
  margin: 6px;
  display: flex;
  align-items: center;
  flex-direction: column;
  border: solid #000000 3px;
  border-radius: 20px;
  padding: 10px 3px 20px 3px;
}

.block{
  background-color: rgba(154, 154, 154, 0.8);
  border-radius: 1vw;
  box-shadow: rgba(0, 0, 0, 0.5) 0.8vh 0.8vh 0.8vh;
  display: flex;
  flex-direction: column;
  font-size: 1vw;
}

.evolution{
  display: flex;
  width: min-content;
  height: min-content;
  justify-self: center;
  flex-direction: column;
  align-items: center;
  margin-top: 2vh;
  padding: 1vh;
  border-radius: 1vw;
  background-color: rgb(212, 212, 212);
  box-shadow: rgba(0, 0, 0, 0.5) 0.8vh 0.8vh 0.8vh;
}

.stat-bar {
  height: 2vh;
  background-color: #ffffffc4;
  border-radius: 5vw;
  overflow: hidden;
  width: 50vw;
}

.rope:hover {
  filter: brightness(1.2);
  transform: scale(0.9);
}

.stat-bar-fill {
  height: 100%;
  background-color: #298fd3;
  border-radius: 5vw;
  animation: fillAnimation 2s ease forwards;
}

.stat-name{
  font-weight: bold;
}

.height::after {
  content: ' m'; /* Agrega Metros después de la altura */
}

.weight::after {
  content: ' kg'; /* Agrega Kg después del peso */
}

@keyframes fillAnimation {
  0% {
    width: 0; /* Estado inicial, la animación comienza desde cero ancho */
  }
  100% {
    width: var(--stat-value); /* Estado final, utiliza tu variable */
  }
}
